[txt_files txt_path]=uigetfile('*.txt','MultiSelect','on');
csvnames=    ["100-100","100-200","100-400","100-800"...
             ,"200-100","200-200","200-400","200-800"...
             ,"400-100","400-200","400-400","400-800"...
             ,"800-100","800-200","800-400","800-800","1600-1600","3200-3200"];
for i=1:length(txt_files)
    file_name=join([string(txt_path),string(txt_files{1,i})],'');
    title=string(txt_files{1,i});
    import_from_eclab1(file_name,txt_path,title,csvnames(i));
end

function import_from_eclab1(filename, txt_path,title, csvname, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   MACM22019951201100100C01 = IMPORTFILE(FILENAME) Reads data from text
%   file FILENAME for the default selection.
%
%   MACM22019951201100100C01 = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads
%   data from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   macm22019951201100100C01 = importfile('240macm2_20199512_01_100_100_C01.txt', 2, 11041);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2019/05/14 12:33:18

%% Initialize variables.
delimiter = '\t';
if nargin<=4
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));
for col=[1,2,3]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells
raw=cell2mat(raw);
raw(:,2)=raw(:,2)*0.001;
%% Create output variable
if nargin<4
    file_name=inputdlg('enter the file name',title,[2 100]);
    file_name=file_name{1};
else
    file_name=csvname;
end
csvwrite(join([txt_path file_name '.csv'],''),raw);
end